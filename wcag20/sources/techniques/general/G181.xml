<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE technique
  SYSTEM "../../xmlspec.dtd">
<technique id="G181">
   <short-name>利用者のデータを、再認証したページで非表示データ又は暗号化されたデータとしてエンコーディングする</short-name>
   <applicability>
      <p>データを送信するのに、利用者認証を求め制限時間のあるウェブページ</p>
   </applicability>
   <applies-to>
      <success-criterion idref="time-limits-server-timeout" relationship="sufficient"/>
   </applies-to>
   <description>
    <p>利用者に認証を求めるウェブサーバーは、一定時間、利用者の操作がない場合、セッションを終了することがよくある。利用者が素早くデータを入力できず、送信前にセッションが時間切れになってしまった場合、プロセスの続行前にサーバーから再認証が求められるだろう。この場合、サーバーはフォームからの情報 (隠しデータ) を再認証ページに受け渡す。その後、利用者が再認証したら、フォームデータを直接送信するか、確認データを含んだページを表示するために、サーバーは再認証ページから受け渡された情報を利用する。この達成方法では、サーバーは利用者が送信したデータを保存しておかなくてもよい。この達成方法が重要なのは、サーバーに一時的に情報を保存することが、違法性やセキュリティリスクに関わるケースである。また、サーバーが記録した情報を保持しつづけたり、新しく認証したセッションでその情報に再接続する必要性から解放する点でも有用である。</p>
    <note>
      <p>利用者から送信されたデータが機密情報であったり、セキュリティリスクの疑いがある場合、データを再認証ページに受け渡したり、再認証後、データ保護を保証するために元のデータを処理してページに受け渡すプロセスを、コンテンツ制作者は見直すべきである。</p>
    </note>
  </description>
   <examples>
      <ulist>
         <item>
            <p>ある Wiki に利用者がログインし、ページの編集を始めた。編集の完了にかかる時間は、サーバーから許可されている不操作セッション時間よりも長いとする。利用者が編集データを送信したが、セッションの時間切れが通知され、ログインページにリダイレクトされた。フォーム送信を処理するスクリプトは、ログインページに元の編集データを変数として受け渡す。利用者のログインが成功すれば、編集画面に戻ることができ、まるでセッションの時間切れがなかったかのようにスクリプトが編集データを処理する。</p>
         </item>
         <item>
            <p>セキュリティが保護されたショッピングサイトに利用者がログインし、注文フォームに情報を入力している。セキュリティ上の理由から、セッションは 30 分後に時間切れとなるが、その利用者はページを読み込んでから 45 分経ってもまだフォームデータを送信していない。利用者には時間切れが通知され、再ログインが促された。利用者が正しくログインできれば、以前に入力したデータが全て残った注文フォームが表示され、内容を確認し、送信できる。ログインが成功しなければ、サーバーによってフォームデータが破棄される。</p>
         </item>
      </ulist>
   </examples>
   <related-techniques>
      <relatedtech idref="G105"/>
   </related-techniques>
   <tests>
      <procedure>
      <p>データの送信にあたって利用者にログインを求めるサイトについて:</p>
      <olist>
        <item>
          <p>ログインし、時間制限のある操作を始める。</p>
        </item>
        <item>
          <p>セッションを時間切れにさせる。</p>
        </item>
        <item>
          <p>データを送信する。 </p>
        </item>
        <item>
          <p>再認証する。</p>
        </item>
        <item>
          <p>再認証後に元のデータ及び変更内容が保持された状態で、その後のプロセスが継続可能で、データの欠落なく完了できることを確認する。</p>
        </item>
        <item>
          <p>手順 3.で送信した情報を保存するために用いた途中経過のデータが、サーバーに残っていないことを確認する (注記: この手法を実行するための技術及び機能の知識が必要である)。</p>
        </item>
      </olist>
    </procedure>
      <expected-results>
         <ulist>
            <item>
               <p>5. 及び 6. の結果が真である。</p>
            </item>
         </ulist>
      </expected-results>
   </tests>
</technique>
